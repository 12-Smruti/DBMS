CREATE TABLE Borrower1 (
    Roll NUMBER(10) PRIMARY KEY,
    Name VARCHAR2(50),
    DateofIssue DATE,
    NameofBook VARCHAR2(100),
    Status CHAR(1) CHECK (Status IN ('I', 'R')));

CREATE TABLE Fine1(
    Roll NUMBER(10),
    Date DATE,
    Amt NUMBER(10, 2),
    CONSTRAINT fk_borrower_roll FOREIGN KEY (Roll) REFERENCES Borrower1(Roll)
);


INSERT INTO Borrower1 (Roll, Name, DateofIssue, NameofBook, Status)
VALUES (1, 'Alice', TO_DATE('2023-10-10', 'YYYY-MM-DD'), 'Database Management Systems', 'I');

INSERT INTO Borrower1 (Roll, Name, DateofIssue, NameofBook, Status)
VALUES (2, 'Bob', TO_DATE('2023-09-20', 'YYYY-MM-DD'), 'Computer Networks', 'I');

INSERT INTO Borrower1 (Roll, Name, DateofIssue, NameofBook, Status)
VALUES (3, 'Charlie', TO_DATE('2023-11-01', 'YYYY-MM-DD'), 'Operating Systems', 'I');

INSERT INTO Borrower1 (Roll, Name, DateofIssue, NameofBook, Status)
VALUES (4, 'Dave', TO_DATE('2023-08-15', 'YYYY-MM-DD'), 'Software Engineering', 'R');

SELECT * FROM Borrower1;
select * from Fine1;


DECLARE
    v_Roll          Borrower.Roll%TYPE;
    v_NameofBook    Borrower.NameofBook%TYPE;
    v_DateofIssue   Borrower.DateofIssue%TYPE;
    v_Status        Borrower.Status%TYPE;
    v_DaysLate      NUMBER;
    v_FineAmt       NUMBER := 0;
    v_CurrentDate   DATE := SYSDATE;

    -- Exception handling variables
    e_BookNotFound EXCEPTION;
    e_StatusError  EXCEPTION;

BEGIN
    -- Accept Roll and NameofBook from the user
    v_Roll := &Roll;
    v_NameofBook := '&NameofBook';

    -- Retrieve DateofIssue and Status of the book for the given Roll and NameofBook
    SELECT DateofIssue, Status
    INTO v_DateofIssue, v_Status
    FROM Borrower
    WHERE Roll = v_Roll AND NameofBook = v_NameofBook;

    -- Check if book has already been returned
    IF v_Status = 'R' THEN
        RAISE e_StatusError;
    END IF;

    -- Calculate the number of days from DateofIssue
    v_DaysLate := v_CurrentDate - v_DateofIssue;

    -- Calculate the fine amount based on the number of days
    IF v_DaysLate > 15 AND v_DaysLate <= 30 THEN
        v_FineAmt := v_DaysLate * 5;
    ELSIF v_DaysLate > 30 THEN
        v_FineAmt := v_DaysLate * 50;
    END IF;

    -- Update the book status to 'R' (Returned)
    UPDATE Borrower
    SET Status = 'R'
    WHERE Roll = v_Roll AND NameofBook = v_NameofBook;

    -- If a fine is applicable, insert fine details into the Fine table
    IF v_FineAmt > 0 THEN
        INSERT INTO Fine (Roll, Date, Amt)
        VALUES (v_Roll, v_CurrentDate, v_FineAmt);
    END IF;

    DBMS_OUTPUT.PUT_LINE('Book returned successfully. Fine Amount: ' || v_FineAmt);

-- Exception handling block
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: No matching record found for the given Roll and Book Name.');
    WHEN e_StatusError THEN
        DBMS_OUTPUT.PUT_LINE('Error: This book has already been returned.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);

END;
/



